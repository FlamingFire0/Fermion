interface IKeyToBoolMap$1 {
    [name: string]: boolean;
}
type ISetSizeBehaviour = 'ratio' | '1' | '2';
interface INumberMap {
    [key: string]: number;
}
interface IBoolMap {
    [key: string]: boolean;
}
interface IGetStateItem {
    size: number;
    visibility: boolean;
    defaultMinSize: number;
    defaultMaxSize: number;
}
interface IGetState {
    [key: string]: IGetStateItem;
}
interface IResizableApi {
    restore: () => void;
    setVisibilities: (map: IKeyToBoolMap$1) => void;
    getVisibilities: () => IBoolMap;
    getSizes: () => INumberMap;
    getState: () => IGetState;
    setSize: (id: string, size: number, behavior?: ISetSizeBehaviour) => void;
    setSizeRatio: (id: string, ratio: number, behavior?: ISetSizeBehaviour) => void;
}
declare const RATIO = "ratio";
declare const BUTTOM_FIRST = "1";
declare const TOP_FIRST = "2";

interface IKeyToBoolMap {
    [name: string]: boolean;
}
interface IMapIdToSize {
    [key: string]: number;
}

type UnitTypes = 'ratio' | 'pixel' | undefined;

type onResizeType = (param: IMapIdToSize) => void;
interface IPane {
    id: string;
    size: number;
    maxSize?: number;
    minSize?: number;
    detectionRadius?: number;
    resizerSize?: number;
    resizerClass?: string;
    activeResizerClass?: string;
    onMinSize?: (id: string, minSize: number) => void;
    onMaxSize?: (id: string, maxSize: number) => void;
    onNormalSize?: (id: string) => void;
}
interface IResizableOptions {
    uniqueId: string;
    resizerClass?: string;
    activeResizerClass?: string;
    vertical?: boolean;
    unit?: UnitTypes;
    minMaxUnit?: UnitTypes;
    storageApi?: any;
    resizerSize?: number;
    visibility?: IKeyToBoolMap;
    detectionRadius?: number;
    onResize?: onResizeType;
    onResizeStop?: onResizeType;
    onChangeVisibility?: (map: IKeyToBoolMap) => void;
    onMinSize?: (id: string, minSize: number) => void;
    onMaxSize?: (id: string, maxSize: number) => void;
    onNormalSize?: (id: string) => void;
    panes: IPane[];
}

type IGetResizablePanes = [resizableApi: IResizableApi, refreshResizable: () => void, clearResizable: () => void];
declare const getResizablePanes: (options: IResizableOptions) => IGetResizablePanes;

export { BUTTOM_FIRST, RATIO, TOP_FIRST, getResizablePanes as default };
