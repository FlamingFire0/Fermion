{"version":3,"file":"index.esm.js","sources":["../../resizable-core/lib/src/utils/constant.ts","../../resizable-core/lib/src/models/utils.ts","../../resizable-core/lib/src/models/pane.ts","../../resizable-core/lib/src/utils/util.ts","../../resizable-core/lib/src/models/pane-model.ts","../../resizable-core/lib/src/models/resizable-model.ts","../../resizable-core/lib/src/utils/panes.ts","../../resizable-core/lib/src/utils/resizable-pane.ts","../../resizable-core/lib/src/utils/dom.ts","../../resizable-core/lib/src/utils/storage.ts","../../resizable-core/lib/src/utils/visibility-helper.ts","../../resizable-core/lib/src/utils/set-size-helper.ts","../../node_modules/throttleit/index.js","../../resizable-core/lib/src/services/detection-service.ts","../../resizable-core/lib/src/context/resizable-panes-context.ts","../src/utils/index.ts","../src/resizer.ts","../src/resizable-provider.ts","../src/pane.ts","../src/resizable-container.ts"],"sourcesContent":["// Need to make Plain\nexport const DIRECTIONS = {\n  DOWN: -1,\n  NONE: 0,\n  UP: 1\n}\n\nexport const CHANGE = {\n  ADD: 1,\n  REMOVE: 2\n}\n\nexport const RATIO = 'ratio'\nexport const SET_SIZE = 'setSize'\n\nexport const BUTTOM_FIRST = '1'\nexport const TOP_FIRST = '2'\n\nexport const RESIZER = 'resizer'\n\nexport const VISIBILITY = 'visibility'\nexport const SIZE = 'size'\nexport const DEFAULT_MIN_SIZE_KEY = 'defaultMinSize'\nexport const DEFAULT_MAX_SIZE_KEY = 'defaultMaxSize'\n\nexport const MIN_WIDTH = 'minWidth'\nexport const MIN_HEIGHT = 'minHeight'\n\nexport const RESIZE_HTML_EVENT = 'resize'\n\n// written same name as of event to optimize the code\nexport const MIN_SIZE_STATE = 'onMinSize'\nexport const MAX_SIZE_STATE = 'onMaxSize'\nexport const NORMAL_SIZE_STATE = 'onNormalSize'\n\nexport const EVENT_NAMES = {\n  mouseup: 'mouseup',\n  mousemove: 'mousemove',\n  mousedown: 'mousedown',\n  touchmove: 'touchmove',\n  touchend: 'touchend',\n  touchstart: 'touchstart'\n}\n","import {IPane, IResizablePaneProviderProps} from '../@types'\nimport {deleteUndefined, noop} from '../utils/util'\n\nexport const checkPaneModelErrors = (size: number, minSize: number, maxSize: number, id: string) => {\n  if (size < minSize) {\n    throw new Error(`Size(${size}) can not be smaller than minSize(${minSize}) for pane id ${id}`)\n  }\n\n  if (size > maxSize) {\n    throw new Error(`Size(${size}) can not be greatter than maxSize(${maxSize}) for pane id ${id}`)\n  }\n}\n\nexport const attachDefaultPaneProps = (paneProps: IPane, resizableProps: IResizablePaneProviderProps) => {\n  const propsWithNoUndefined = deleteUndefined({...paneProps})\n\n  const {\n    onMinSize = noop,\n    onMaxSize = noop,\n    onNormalSize = noop,\n\n    resizerClass,\n    activeResizerClass,\n    resizerSize,\n    detectionRadius\n  } = resizableProps\n\n  return {\n    onMinSize,\n    onMaxSize,\n    onNormalSize,\n    resizerSize,\n    resizerClass,\n    detectionRadius,\n    activeResizerClass,\n    minSize: 0,\n    maxSize: Infinity,\n    ...propsWithNoUndefined\n  }\n}\n","import {IResizerApi, ISizeState, IStoreResizableItemsModel} from '../@types'\nimport {\n  CHANGE,\n  DEFAULT_MAX_SIZE_KEY,\n  DEFAULT_MIN_SIZE_KEY,\n  MAX_SIZE_STATE, MIN_SIZE_STATE, NORMAL_SIZE_STATE,\n  RATIO, SIZE, VISIBILITY\n} from '../utils/constant'\nimport {filterKeys, ratioAndRoundOff} from '../utils/util'\nimport {PaneModel} from './pane-model'\nimport {checkPaneModelErrors} from './utils'\n\nexport const changePaneSizePlain = (pane: PaneModel, newSize: number) => {\n  const {minSize, maxSize} = pane\n  let acceptedSize = pane.minSize\n  if (newSize >= minSize && newSize <= maxSize) {\n    acceptedSize = newSize\n  } else if (newSize > maxSize) {\n    acceptedSize = maxSize\n  }\n  pane.size = acceptedSize\n  return acceptedSize\n}\n\nexport const changePaneSize = (pane: PaneModel, sizeChange: number,\n  operation: number) => {\n  const {axisSize} = pane\n  const newSize = axisSize + (operation === CHANGE.ADD ? sizeChange : -sizeChange)\n\n  const acceptedSize = changePaneSizePlain(pane, newSize)\n  return Math.abs(acceptedSize - newSize)\n}\n\n// No visibility check required here, we are only using this method for visible panes\nexport const setVisibilitySize = (pane: PaneModel, sizeChange: number,\n  operation: number) => {\n  const newSize = pane.size + (operation === CHANGE.ADD ? sizeChange : -sizeChange)\n  restoreLimits(pane)\n  const acceptedSize = changePaneSizePlain(pane, newSize)\n  return acceptedSize === newSize\n}\n\nconst setVisibilityHelper = (pane: PaneModel, isPartiallyHidden: boolean) => {\n  if (pane.isHandle) {\n    pane.size = isPartiallyHidden ? 0 : pane.resizerSize\n  }\n}\n\nexport const setPaneVisibility = (pane: PaneModel, visibility: boolean, isPartiallyHidden = false) => {\n  if (pane) {\n    pane.visibility = visibility\n    if (visibility) {\n      pane.maxSize = pane.defaultMaxSize\n      pane.minSize = pane.defaultMinSize\n      setVisibilityHelper(pane, isPartiallyHidden)\n    } else {\n      pane.maxSize = 0\n      pane.minSize = 0\n    }\n    if (pane.api && pane.api.destroy) { pane.api.destroy(visibility) }\n  }\n}\n\nexport const setPaneOldVisibilityModel = (pane: PaneModel) => {\n  pane.oldVisibleSize = pane.size\n  pane.oldVisibility = pane.visibility\n}\n\nexport const syncPaneToOldVisibilityModel = (pane: PaneModel) => {\n  pane.size = pane.oldVisibleSize\n  pane.visibility = pane.oldVisibility\n}\n\nexport const storePaneForNewSetSizeKey = (pane: PaneModel) => {\n  pane.initialSetSize = pane.size\n}\n\nexport const restorePaneBeforeSetSize = (pane: PaneModel) => {\n  pane.size = pane.initialSetSize\n}\n\nexport const syncPaneSizeToRatioSize = (pane: PaneModel) => {\n  pane.size = pane.sizeRatio\n  pane.defaultMinSize = pane.minSizeRatio\n  pane.defaultMaxSize = pane.maxSizeRatio\n}\n\nexport const syncPaneRatioSizeToSize = (pane: PaneModel) => {\n  pane.sizeRatio = pane.size\n  pane.minSizeRatio = pane.defaultMinSize\n  pane.maxSizeRatio = pane.defaultMaxSize\n}\n\nexport const restorePane = (pane: PaneModel) => {\n  pane.size = pane.defaultSize\n  restoreLimits(pane)\n  setPaneVisibility(pane, pane.defaultVisibility)\n}\n\nexport const restoreLimits = (pane: PaneModel) => {\n  pane.minSize = pane.defaultMinSize\n  pane.maxSize = pane.defaultMaxSize\n}\n\n// pane method runs only for visible panes\nexport const resetMax = (pane: PaneModel) => {\n  pane.maxSize = pane.defaultMaxSize\n  return pane.maxSize\n}\n\n// pane method runs only for visible panes\nexport const resetMin = (pane: PaneModel) => {\n  pane.minSize = pane.defaultMinSize\n  return pane.minSize\n}\n\nexport const synMaxToSize = (pane: PaneModel) => {\n  pane.maxSize = pane.size\n  return pane.size\n}\n\nexport const synMinToSize = (pane: PaneModel) => {\n  pane.minSize = pane.size\n  return pane.size\n}\n\n// pane method runs only for visible panes\nexport const getMinDiff = (pane: PaneModel) => {\n  return pane.size - pane.defaultMinSize\n}\n\nexport const getMaxDiff = (pane: PaneModel) => {\n  return pane.defaultMaxSize - pane.size\n}\n\nexport const synSizeToMinSize = (pane: PaneModel) => {\n  pane.size = pane.minSize\n}\n\nexport const synSizeToMaxSize = (pane: PaneModel) => {\n  pane.size = pane.maxSize\n}\n\nexport const syncAxisSize = (pane: PaneModel) => {\n  pane.axisSize = pane.size\n}\n\n// export const setPreSize = (pane: PaneModel) => {\n//   pane.size = pane.preSize\n// }\n\n// Task will run  for only visible Items\nexport const setUISize = (pane: PaneModel) => {\n  // if (pane.api) {\n  pane.api.setSize(getSize(pane))\n\n  // pane.preSize = pane.size\n}\n\n// eslint-disable-next-line complexity\nexport const updatSizeState = (pane: PaneModel) => {\n  if (pane.visibility && !pane.isHandle) {\n    const {size, id} = pane\n\n    let newSetSize : ISizeState\n    if (size === pane.defaultMaxSize) {\n      newSetSize = MAX_SIZE_STATE\n    } else if (size === pane.defaultMinSize) {\n      newSetSize = MIN_SIZE_STATE\n    } else {\n      newSetSize = NORMAL_SIZE_STATE\n    }\n\n    if (pane.sizeState !== newSetSize) {\n      pane.props[newSetSize](id, size)\n      pane.sizeState = newSetSize\n    }\n  }\n}\n\nexport const getStoreModel = (pane: PaneModel): IStoreResizableItemsModel => {\n  const t = filterKeys(pane, 'id', SIZE,\n    'defaultSize', DEFAULT_MIN_SIZE_KEY, VISIBILITY, 'storedSize')\n  return {\n    ...t,\n    [DEFAULT_MAX_SIZE_KEY]: pane[DEFAULT_MAX_SIZE_KEY].toString()\n  }\n}\n\nexport const getSize = (pane: PaneModel) => {\n  return pane.visibility ? pane.size : 0\n}\n\nexport const getRatioSize = (pane: PaneModel) => {\n  return pane.visibility ? pane.sizeRatio : 0\n}\n\nexport const initializeSize = (pane: PaneModel, size: number) => {\n  pane.size = size\n  pane.storedSize = size\n}\n\nexport const initializeSizes = (pane: PaneModel, size: number, minSize: number, maxSize: number,\n  defaultSize: number, storedSize: number, visibility: boolean) => {\n  initializeSize(pane, size)\n  pane.defaultSize = defaultSize\n  pane.minSize = minSize\n  pane.maxSize = maxSize\n  pane.defaultMinSize = minSize\n  pane.defaultMaxSize = maxSize\n  pane.storedSize = storedSize\n  pane.visibility = visibility\n}\n\n// We never come here for the case of store\nexport const toRatioModePane = (\n  pane: PaneModel, containerSize: number,\n  maxRatioValue: number, isOnResize: boolean) => {\n  const {\n    minSize, size, maxSize\n  } = pane.props\n\n  // need optimization\n  const [minSizeToUse, sizeToUse, maxSizeToUse] = isOnResize\n    ? [pane.minSizeRatio, pane.size, pane.maxSizeRatio]\n    : [minSize, size, maxSize]\n\n  const storeSizeCalculated = ratioAndRoundOff(containerSize, maxRatioValue, sizeToUse)\n\n  let minSizeCalculated, maxSizeCalculated\n  if (pane.minMaxUnit !== RATIO) {\n    minSizeCalculated = pane.defaultMinSize\n    maxSizeCalculated = pane.defaultMaxSize\n  } else {\n    minSizeCalculated = ratioAndRoundOff(containerSize, maxRatioValue, minSizeToUse)\n    maxSizeCalculated = ratioAndRoundOff(containerSize, maxRatioValue, maxSizeToUse)\n  }\n\n  if (!isOnResize) {\n    if (pane.minMaxUnit !== RATIO) {\n      checkPaneModelErrors(storeSizeCalculated, minSizeCalculated, maxSizeCalculated, pane.id)\n    } else {\n      checkPaneModelErrors(size, minSize, maxSize, pane.id)\n    }\n  }\n\n  initializeSizes(pane, storeSizeCalculated, minSizeCalculated,\n    maxSizeCalculated, storeSizeCalculated, storeSizeCalculated, pane.visibility)\n}\n\nexport const registerResizableItem = (pane: PaneModel, api: IResizerApi) => {\n  pane.api = api\n  if (pane.isHandle) {\n    const size = pane.resizerSize\n    api.setSize(size)\n    initializeSizes(pane, size, size, size, size, size, pane.visibility)\n  }\n}\n","import {IAnyMap, IPaneModelKey, IStoreResizableItemsModel} from '../@types'\nimport {DIRECTIONS, RESIZER, SIZE} from './constant'\nimport {PaneModel} from '../models'\nimport {getSize} from '../models/pane'\n\nexport type INoop = (_: any) => any\n\nexport const noop: INoop = (_: any): any => _\n\nexport const findById = <T>(list: T[] | any[], _id: string) =>\n  list.find(({id}) => id === _id)\n\nexport const createMap = (paneList: PaneModel[] | IStoreResizableItemsModel[], ...keys: IPaneModelKey[]) => {\n  const map: IAnyMap = {}\n  paneList.forEach((pane) => {\n    const getValue = (key: string) => key === SIZE ? getSize(pane as PaneModel) : pane[key]\n\n    const {id} = pane\n    if (keys.length === 1) {\n      map[id] = getValue(keys[0])\n    } else {\n      map[id] = keys.reduce((acc: any, key) => {\n        acc[key] = getValue(key)\n        return acc\n      }, {})\n    }\n  })\n  return map\n}\n\n// export const isUndefinedOrNull = (value: any) => value === undefined || value === null\n\nexport const findIndex = (list: any[], value: any, key = 'id') =>\n  list.findIndex((item) => item[key] === value)\n\nexport const ratioToNumber = (totalSize: number, maxRatioValue: number, size: number) =>\n  Number((totalSize * (size / maxRatioValue)).toFixed(0))\n\nexport const ratioAndRoundOff = (totalSize: number, maxRatioValue: number, size: number) => Math.round(\n  ratioToNumber(totalSize, maxRatioValue, size)\n)\n\nexport const filterKeys = <T>(obj: T, ...keys: (keyof T)[]) => {\n  const retObj: any = {}\n  keys.forEach(key => {\n    retObj[key] = obj[key]\n  })\n\n  return retObj\n}\n\nexport const isItUp = (direction: number) => direction === DIRECTIONS.UP\nexport const isItDown = (direction: number) => direction === DIRECTIONS.DOWN\n\nexport const getResizerId = (paneId: string) => `${RESIZER}-${paneId}`\n\n// need to make pure\nexport const deleteUndefined = (anyObject: any) => {\n  Object.keys(anyObject).forEach(key => {\n    if (anyObject[key] === undefined) {\n      delete anyObject[key]\n    }\n  })\n  return anyObject\n}\n\nexport const reverse = <T>(list: T[]): T[] => [...list].reverse()\nexport const filterEmpty = (list: any[]) => list.filter(_ => _)\n\nexport const sortNumber = (list: number[]) => {\n  return [...list].sort((a, b) => {\n    if (a > b) {\n      return -1\n    } else if (b > a) {\n      return 1\n    }\n    return 0\n  })\n}\n","import {\n  IPane,\n  IResizablePaneProviderProps,\n  IResizerApi,\n  ISizeState,\n  UnitTypes\n} from '../@types'\nimport {\n  NORMAL_SIZE_STATE,\n  RATIO\n} from '../utils/constant'\nimport {ResizeStorage} from '../utils/storage'\nimport {getResizerId} from '../utils/util'\nimport {\n  initializeSizes,\n  syncPaneRatioSizeToSize\n} from './pane'\nimport {attachDefaultPaneProps, checkPaneModelErrors} from './utils'\n\nexport class PaneModel {\n  isHandle: boolean\n\n  initialSetSize: number\n\n  resizerSize: number\n  detectionRadius: number\n\n  id: string\n  api: any | IResizerApi\n  size: number\n  sizeRatio: number\n  minSizeRatio: number\n  maxSizeRatio: number\n\n  sizeState: ISizeState = NORMAL_SIZE_STATE\n\n  minMaxUnit: UnitTypes\n\n  preSize: number\n  // get _size () {\n  //   return this.size\n  // }\n\n  // set _size (val:number) {\n  //   if (val === 63) {\n  //     debugger\n  //   }\n  //   this.size = val\n  // }\n\n  defaultSize: number\n  minSize: number\n  defaultMinSize: number\n  maxSize: number\n  defaultMaxSize: number\n\n  visibility: boolean\n  defaultVisibility: boolean\n\n  storedSize: number = 0\n\n  vertical: boolean\n\n  axisSize: number = 0\n\n  oldVisibleSize: number = 0\n  oldVisibility: boolean = true\n  props:IPane\n  // Development Variables\n\n  // eslint-disable-next-line complexity\n  constructor (\n    paneProps: IPane,\n    resizableProps: IResizablePaneProviderProps,\n    store: ResizeStorage, isHandle: boolean) {\n    this.props = attachDefaultPaneProps(paneProps, resizableProps)\n\n    const {\n      id, minSize, size, maxSize, resizerSize, detectionRadius\n    } = this.props\n\n    const {visibility, vertical, minMaxUnit, unit} = resizableProps\n\n    this.minMaxUnit = minMaxUnit ?? unit\n\n    if (unit !== RATIO) {\n      checkPaneModelErrors(size, minSize, maxSize, id)\n    }\n\n    // // it can be removed with change in default props\n    const show = visibility[id] ?? true\n    this.defaultVisibility = show\n\n    const storedPane = store.getStoredPane(id)\n    if (storedPane) {\n      const {size, defaultMaxSize, defaultMinSize, defaultSize, visibility, storedSize} = storedPane\n      initializeSizes(this, size, defaultMinSize, defaultMaxSize as number, defaultSize, storedSize, visibility)\n    } else {\n      initializeSizes(this, size, minSize, maxSize, size, size, show)\n    }\n\n    this.id = id\n    this.vertical = vertical\n    syncPaneRatioSizeToSize(this)\n\n    this.isHandle = isHandle\n    if (isHandle) {\n      this.id = getResizerId(id)\n      this.resizerSize = resizerSize\n      this.detectionRadius = detectionRadius\n    }\n  }\n}\n","import {IResizableApi, IResizableEvent, IResizableItem, IResizablePaneProviderProps} from '../@types'\nimport {PaneModel} from './pane-model'\n\nexport class ResizableModel {\n  // Need to clear on all operations\n  isSetRatioMode = false\n  newVisibilityModel = false\n  isViewSizeChanged = false\n\n  setSizeKey: string\n\n  vertical: boolean\n\n  direction: number\n  axisCoordinate: number\n\n  index: number\n  topAxis: number\n  bottomAxis: number\n\n  handleId: string\n\n  items: IResizableItem[]\n\n  panesList: PaneModel[]\n  resizersList: IResizableItem[]\n\n  previousTouchEvent: any\n  detectionDetails: [number, number, string][]\n  onMouseDown: ([mouseCoordinate]: IResizableEvent, handleId: string) => void\n  onMoveResize: ([mouseCoordinate, movement]: IResizableEvent) => void\n  onMouseUp: () => void\n\n  api: IResizableApi\n  registerItem: (api: any, id: string) => void\n  registerContainer: any\n  props: IResizablePaneProviderProps\n\n  getPaneSizeStyle: (id: string) => any\n\n  getContainerRect: () => any\n\n  register (subModel: any) {\n    Object.assign(this, subModel)\n  }\n}\n","import {ReactElement} from 'react'\nimport {IResizableItem, IResizablePaneProviderProps} from '../@types'\nimport {PaneModel, ResizableModel} from '../models'\nimport {ResizeStorage} from './storage'\nimport {CHANGE} from './constant'\nimport {\n  getRatioSize,\n  getSize, initializeSize, restorePane, setUISize, synMaxToSize,\n  synMinToSize,\n  syncAxisSize, updatSizeState\n}\n  from '../models/pane'\n\nexport const syncAxisSizesFn = (panesList: PaneModel[]) =>\n  panesList.forEach(syncAxisSize)\n\nexport const setUISizesFn = (items: IResizableItem[]) => {\n  items.forEach(setUISize)\n}\n\nexport const getVisibleItems = (list: IResizableItem[]) => list.filter(item => item.visibility)\n\nexport function getSum <T> (list: T[], getNumber: (item:T) => number, start = 0, end = list.length - 1) {\n  let sum = 0\n  for (let i = start; i <= end; i++) {\n    sum += getNumber(list[i])\n  }\n  return sum\n}\n\nexport const synPanesMaxToSize = (panesList: PaneModel[], start: number, end: number) =>\n  getSum(panesList, synMaxToSize, start, end)\n\nexport const synPanesMinToSize = (panesList: PaneModel[], start: number, end: number) =>\n  getSum(panesList, synMinToSize, start, end)\n\nexport const getItemsSizeSum = (panesList: PaneModel[], start?: number, end?: number) =>\n  getSum(panesList, getSize, start, end)\n\nexport const getRatioSizeSum = (panesList: PaneModel[]) =>\n  getSum(panesList, getRatioSize)\n\nexport const getMaxSizeSum = (panesList: PaneModel[], start?: number, end?: number) =>\n  getSum(panesList, (pane) => pane.maxSize, start, end)\n\nexport const getMinSizeSum = (panesList: PaneModel[], start: number, end: number) =>\n  getSum(panesList, (pane) => pane.minSize, start, end)\n\n// Need to check for hidden element\nexport const restoreFn = (items: IResizableItem[]) => {\n  items.forEach(restorePane)\n  setUISizesFn(items)\n}\n\n// It is used when we rapidly move out of axis\nexport const setMaxLimits = (resizable: ResizableModel,\n  firstInningMethod: any, secondInningMethod: any, direction: number) => {\n  const {items, index} = resizable\n  const visibleItems = getVisibleItems(items)\n\n  for (let i = 0; i < visibleItems.length; i++) {\n    if (i <= index) {\n      firstInningMethod(visibleItems[i], direction)\n    } else {\n      secondInningMethod(visibleItems[i], direction)\n    }\n  }\n}\n\nexport const updatSizeStateAllPanes = (panesList: PaneModel[]) => {\n  panesList.forEach(updatSizeState)\n}\n\nconst fixChangeCallBack = (pane: PaneModel, change: number, operation: number) => {\n  const newSize = pane.size + (operation === CHANGE.ADD ? change : -change)\n  initializeSize(pane, newSize)\n}\n\nexport const change1PixelToPanes = (panesList: PaneModel[], sizeChange: number,\n  operation: number) => {\n  let count = 0\n  const len = panesList.length\n  let index: number\n\n  while (sizeChange > 1) {\n    index = count % len\n\n    if (panesList[index].visibility) {\n      fixChangeCallBack(panesList[index], 1, operation)\n      --sizeChange\n    }\n    ++count\n  }\n\n  while (1) {\n    index = count % len\n\n    if (panesList[index].visibility) {\n      fixChangeCallBack(panesList[index], sizeChange, operation)\n      return\n    }\n    ++count\n  }\n}\n\nexport const getPanesAndResizers = (items: IResizableItem[]): [ panesList: IResizableItem[],\n  resizersList: IResizableItem[]] => {\n  const panesList = items.filter((item) => !item.isHandle)\n  const resizersList = items.filter((item) => item.isHandle)\n  return [\n    panesList,\n    resizersList\n  ]\n}\n\nexport const createPaneModelListAndResizerModelList = (\n  children: ReactElement[],\n  resizableProps: IResizablePaneProviderProps,\n  store: ResizeStorage\n): IResizableItem[] => {\n  const items: IResizableItem[] = []\n  children.forEach(child =>\n    items.push(\n      new PaneModel(child.props, resizableProps, store, false),\n      new PaneModel(child.props, resizableProps, store, true)\n    )\n  )\n  items.pop()\n  return items\n}\n","import {IClearFlagsParam, IResizableItem} from '../@types'\nimport {CHANGE, RATIO, SET_SIZE, VISIBILITY} from './constant'\nimport {PaneModel, ResizableModel} from '../models'\nimport {\n  changePaneSize, getMaxDiff, getMinDiff,\n  resetMax, resetMin, syncPaneRatioSizeToSize, syncPaneSizeToRatioSize, toRatioModePane\n} from '../models/pane'\nimport {\n  change1PixelToPanes, getMaxSizeSum, getMinSizeSum,\n  getItemsSizeSum, getRatioSizeSum, getVisibleItems, setUISizesFn,\n  synPanesMaxToSize, synPanesMinToSize\n} from './panes'\nimport {findIndex, isItUp, reverse} from './util'\n\nexport const movingLogic = (mouseCoordinate: number, resizable: ResizableModel) => {\n  let sizeChange: number\n\n  const {items, direction, index, axisCoordinate} = resizable\n\n  const visibleItems = getVisibleItems(items)\n\n  let decreasingItems: IResizableItem[]\n  let increasingItems: IResizableItem []\n\n  const firstHalf = reverse(visibleItems.slice(0, index + 1))\n  const secondHalf = visibleItems.slice(index + 1)\n\n  if (isItUp(direction)) {\n    sizeChange = axisCoordinate - mouseCoordinate\n    increasingItems = secondHalf\n    decreasingItems = firstHalf\n  } else {\n    sizeChange = mouseCoordinate - axisCoordinate\n    increasingItems = firstHalf\n    decreasingItems = secondHalf\n  }\n\n  if (sizeChange < 0) {\n    // throw new Error('eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee')\n  } else if (sizeChange === 0) {\n    return\n  }\n\n  let reverseSizeChange = sizeChange\n\n  decreasingItems.forEach(item => {\n    sizeChange = changePaneSize(item, sizeChange, CHANGE.REMOVE)\n  })\n\n  reverseSizeChange -= sizeChange\n\n  increasingItems.forEach(item => {\n    reverseSizeChange = changePaneSize(item, reverseSizeChange, CHANGE.ADD)\n  })\n}\n\nexport const getHandleIndex = (items: IResizableItem[], handleId: string) => {\n  const visibleItems = getVisibleItems(items)\n  const handleIndex = findIndex(visibleItems, handleId)\n  return handleIndex\n}\n\nexport const setCurrentMinMax = (resizable: ResizableModel) => {\n  const {containerSize} = getMaxContainerSizes(resizable)\n\n  const {items, index} = resizable\n  const visibleItems = getVisibleItems(items)\n\n  const nextIdx = index + 1\n  const aMaxChangeUp = getMinDiff(visibleItems[index])\n  const bMaxChangeUp = getMaxDiff(visibleItems[nextIdx])\n\n  minMaxLogicUp(visibleItems, aMaxChangeUp - bMaxChangeUp, index, nextIdx, 0, containerSize)\n\n  const aMaxChangeDown = getMinDiff(visibleItems[nextIdx])\n  const bMaxChangeDown = getMaxDiff(visibleItems[index])\n  minMaxLogicDown(visibleItems, bMaxChangeDown - aMaxChangeDown, index, nextIdx, 0, containerSize)\n}\n\nexport const calculateAxes = (resizable: ResizableModel) => {\n  const {items, index} = resizable\n  const {maxTopAxis} = getMaxContainerSizes(resizable)\n  const visibleItemsList = getVisibleItems(items)\n\n  resizable.bottomAxis = maxTopAxis + getMaxSizeSum(visibleItemsList, 0, index - 1)\n  resizable.topAxis = maxTopAxis + getMinSizeSum(visibleItemsList, 0, index - 1)\n}\n\n// aIndex will decrease and bIndex will increase\n// eslint-disable-next-line complexity\nexport const minMaxLogicUp = (\n  panesList: PaneModel[], value: number,\n  aIndex: number, bIndex: number,\n  sum: number, maxPaneSize: number) => {\n  const lastIndex = panesList.length - 1\n\n  let nextValue: number\n  let nextAIndex = aIndex\n  let nextBIndex = bIndex\n\n  const paneA = panesList[aIndex]\n  const paneB = panesList[bIndex]\n\n  const toMinA = () => {\n    sum += resetMin(paneA)\n  }\n\n  const toMaxB = () => {\n    sum += resetMax(paneB)\n  }\n\n  switch (true) {\n    case aIndex > 0 && bIndex < lastIndex:\n      switch (true) {\n        case value < 0:\n          toMinA()\n          nextAIndex = aIndex - 1\n          nextValue = getMinDiff(panesList[nextAIndex]) + value\n          break\n\n        case value === 0:\n          toMinA()\n          toMaxB()\n          nextAIndex = aIndex - 1\n          nextBIndex = bIndex + 1\n          nextValue = getMinDiff(panesList[nextAIndex]) - getMaxDiff(panesList[nextBIndex])\n          break\n\n        case value > 0:\n          toMaxB()\n          nextBIndex = bIndex + 1\n          nextValue = value - getMaxDiff(panesList[nextBIndex])\n          break\n      }\n      break\n      // ---------------------------------------------------------------------------------\n    case aIndex === 0 && bIndex < lastIndex:\n      switch (true) {\n        case value < 0:\n          toMinA()\n          sum += synPanesMaxToSize(panesList, bIndex + 1, lastIndex)\n          paneB.maxSize = maxPaneSize - sum\n          return\n\n        case value === 0:\n          toMinA()\n          toMaxB()\n          synPanesMaxToSize(panesList, bIndex + 1, lastIndex)\n          return\n\n        case value > 0:\n          // not change from previous switch\n          toMaxB()\n          nextBIndex = bIndex + 1\n          nextValue = value - getMaxDiff(panesList[nextBIndex])\n          break\n      }\n      break\n      // ---------------------------------------------------------------------------------\n    case aIndex > 0 && bIndex === lastIndex:\n      switch (true) {\n        case value < 0:\n          toMinA()\n          nextAIndex = aIndex - 1\n          nextValue = getMinDiff(panesList[nextAIndex]) + value\n          break\n\n        case value === 0:\n          toMinA()\n          toMaxB()\n          synPanesMinToSize(panesList, 0, aIndex - 1)\n          return\n\n        case value > 0:\n          toMaxB()\n          sum += synPanesMinToSize(panesList, 0, aIndex - 1)\n          paneA.minSize = maxPaneSize - sum\n          return\n      }\n      break\n      // ---------------------------------------------------------------------------------\n    case aIndex === 0 && bIndex === lastIndex:\n      // return for every case\n      switch (true) {\n        case value < 0:\n          toMinA()\n          paneB.maxSize = maxPaneSize - sum\n          return\n\n        case value === 0:\n          toMinA()\n          toMaxB()\n          return\n\n        case value > 0:\n          toMaxB()\n          paneA.minSize = maxPaneSize - sum\n          return\n      }\n  }\n\n  minMaxLogicUp(panesList, nextValue, nextAIndex, nextBIndex, sum, maxPaneSize)\n}\n\n// eslint-disable-next-line complexity\nexport const minMaxLogicDown = (\n  panesList: PaneModel[], value: number,\n  aIndex: number, bIndex: number, sum: number,\n  maxPaneSize: number) => {\n  const lastIndex = panesList.length - 1\n\n  let nextValue: number\n  let nextAIndex = aIndex\n  let nextBIndex = bIndex\n  const paneA = panesList[aIndex]\n  const paneB = panesList[bIndex]\n\n  const toMaxA = () => {\n    sum += resetMax(paneA)\n  }\n\n  const toMinB = () => {\n    sum += resetMin(paneB)\n  }\n\n  switch (true) {\n    case aIndex > 0 && bIndex < lastIndex:\n      switch (true) {\n        case value < 0:\n          toMaxA()\n          nextAIndex = aIndex - 1\n          nextValue = getMaxDiff(panesList[nextAIndex]) + value\n          break\n\n        case value === 0:\n          toMaxA()\n          toMinB()\n          nextAIndex = aIndex - 1\n          nextBIndex = bIndex + 1\n          nextValue = getMaxDiff(panesList[nextAIndex]) - getMinDiff(panesList[nextBIndex])\n          break\n\n        case value > 0:\n          toMinB()\n          nextBIndex = bIndex + 1\n          nextValue = value - getMinDiff(panesList[nextBIndex])\n          break\n      }\n      break\n      // ---------------------------------------------------------------------------------\n    case aIndex === 0 && bIndex < lastIndex:\n      switch (true) {\n        case value < 0:\n          toMaxA()\n          sum += synPanesMinToSize(panesList, bIndex + 1, lastIndex)\n          paneB.minSize = maxPaneSize - sum\n          return\n\n        case value === 0:\n          toMaxA()\n          toMinB()\n          synPanesMinToSize(panesList, bIndex + 1, lastIndex)\n          return\n\n        case value > 0:\n          // not change from previous switch\n          toMinB()\n          nextBIndex = bIndex + 1\n          nextValue = value - getMinDiff(panesList[nextBIndex])\n          break\n      }\n      break\n      // ---------------------------------------------------------------------------------\n    case aIndex > 0 && bIndex === lastIndex:\n      switch (true) {\n        case value < 0:\n          toMaxA()\n          nextAIndex = aIndex - 1\n          nextValue = getMaxDiff(panesList[nextAIndex]) + value\n          break\n\n        case value === 0:\n          toMaxA()\n          toMinB()\n          synPanesMaxToSize(panesList, 0, aIndex - 1)\n          return\n\n        case value > 0:\n          toMinB()\n          sum += synPanesMaxToSize(panesList, 0, aIndex - 1)\n          paneA.maxSize = maxPaneSize - sum\n          return\n      }\n      break\n      // ---------------------------------------------------------------------------------\n    case aIndex === 0 && bIndex === lastIndex:\n      // return for every case\n      switch (true) {\n        case value < 0:\n          toMaxA()\n          paneB.minSize = maxPaneSize - sum\n          return\n\n        case value === 0:\n          toMinB()\n          toMaxA()\n          return\n\n        case value > 0:\n          toMinB()\n          paneA.maxSize = maxPaneSize - sum\n          return\n      }\n  }\n\n  minMaxLogicDown(panesList, nextValue, nextAIndex, nextBIndex, sum, maxPaneSize)\n}\n\nexport const getMaxContainerSizes = ({getContainerRect, vertical, resizersList} :ResizableModel) => {\n  const {top, height, left, width} = getContainerRect()\n  const maxTopAxis = vertical ? left : top\n  const containerSize = Math.round(vertical ? width : height)\n  const resizersSize = getItemsSizeSum(resizersList)\n  const maxPaneSize = containerSize - resizersSize\n\n  return {\n    containerSize,\n    maxTopAxis,\n    maxPaneSize\n  }\n}\n\nexport const toRatioModeAllPanes = (resizable: ResizableModel, isOnResize = false) => {\n  const {panesList, items} = resizable\n  const {maxPaneSize} = getMaxContainerSizes(resizable)\n\n  const maxRatioValue = getRatioSizeSum(panesList)\n  if (maxRatioValue < 0) {\n    return\n  }\n\n  panesList\n    .forEach((pane: PaneModel) => {\n      syncPaneSizeToRatioSize(pane)\n      toRatioModePane(pane, maxPaneSize, maxRatioValue, isOnResize)\n    })\n\n  const sizeSum = getItemsSizeSum(panesList)\n  const leftOverTotalSize = maxPaneSize - sizeSum\n  const changeOperation = leftOverTotalSize < 0 ? CHANGE.REMOVE : CHANGE.ADD\n  change1PixelToPanes(panesList, Math.abs(leftOverTotalSize), changeOperation)\n\n  setUISizesFn(items)\n}\n\nexport const getChangeInViewSize = (resizable: ResizableModel) => {\n  const {items} = resizable\n  const {containerSize} = getMaxContainerSizes(resizable)\n  const allItemsSum = getItemsSizeSum(items)\n  return containerSize - allItemsSum\n}\n\nexport const clearflagsOnNewView = (resizable: ResizableModel, except?: IClearFlagsParam) => {\n  const {panesList} = resizable\n  if (except !== RATIO) {\n    panesList.forEach(syncPaneRatioSizeToSize)\n  }\n  if (except !== VISIBILITY) {\n    resizable.newVisibilityModel = false\n  }\n  if (except !== SET_SIZE) {\n    resizable.setSizeKey = null\n  }\n}\n","import {\n  IResizableEvent, IJoinClassNameParam,\n  UnitTypes, IBooleanOrUndefined, ISizeStyle\n} from '../@types'\nimport {\n\n  DIRECTIONS,\n  MIN_HEIGHT,\n  MIN_WIDTH,\n  RATIO\n} from './constant'\n\nexport const toPx = (size: number) => `${size}px`\nexport const getSizeKey = (vertical: boolean) => vertical ? 'width' : 'height'\nexport const getSizeStyle = (vertical: IBooleanOrUndefined, size: number): ISizeStyle => ({\n  [getSizeKey(vertical)]: toPx(size)\n})\n\nexport const joinClassName = (param: IJoinClassNameParam) => {\n  const keys = Object.keys(param)\n  return keys.map((key) => param[key] ? key : '').join(' ')\n}\n\nexport const getContainerClass = (vertical: boolean, className: string, unit: UnitTypes) =>\n  joinClassName({\n    flex: true,\n    'f-row w-fit-content h-100p': vertical,\n    'f-column': !vertical,\n    'w-100p h-100p': unit === RATIO,\n    [className]: className\n  })\n\nexport const isTouchEvent = (event: any) => event.type.startsWith('touch')\n\nexport const getResizableEventFromTouch = (e: any, vertical: boolean, previousTouchEvent: any): IResizableEvent => {\n  const currentTouch = e.targetTouches[0]\n  const {pageX = 0, pageY = 0} = previousTouchEvent.current ?? {}\n  previousTouchEvent.current = currentTouch\n  if (vertical) {\n    return [currentTouch.clientX, currentTouch.pageX - pageX]\n  } else {\n    return [currentTouch.clientY, currentTouch.pageY - pageY]\n  }\n}\n\nexport const getResizableEventFromMouse = (e: any, vertical: boolean): IResizableEvent => {\n  const {clientX, clientY, movementX, movementY} = e\n  return vertical ? [clientX, movementX] : [clientY, movementY]\n}\n\nexport const getResizableEvent = (e: any, vertical: boolean, previousTouchEvent: any): IResizableEvent => {\n  return isTouchEvent(e)\n    ? getResizableEventFromTouch(e, vertical, previousTouchEvent)\n    : getResizableEventFromMouse(e, vertical)\n}\n\n// it can be removed\nexport const getDirection = (movement: number) => movement < 0 ? DIRECTIONS.UP : DIRECTIONS.DOWN\n\nexport const toArray = (items: any) => Array.isArray(items) ? items : [items]\n\nexport const getSetSize = (node: any, vertical: boolean) => (size: number) => {\n  node.style[getSizeKey(vertical)] = toPx(size)\n}\n\nexport const getSetResizerSize = (node: any, vertical: boolean) => (size: number) => {\n  const getSizeKey = (vertical: boolean) => vertical ? MIN_WIDTH : MIN_HEIGHT\n  node.style[getSizeKey(vertical)] = toPx(size)\n}\n\nexport const addDOMEvent = (node: HTMLElement | Document | Window,\n  callBack: (e: any) => void, ...eventNames: string[]) => {\n  eventNames.forEach((eventName) => node.addEventListener(eventName, callBack))\n}\n\nexport const addDOMEventPassive = (node: HTMLElement | Document | Window,\n  callBack: (e: any) => void, eventName: string) => {\n  node.addEventListener(eventName, callBack, {passive: false})\n}\n\nexport const removeDOMEvent = (node: HTMLElement | Document | Window,\n  callBack: (e: any) => void, ...eventNames: string[]) => {\n  eventNames.forEach((eventName) => node.removeEventListener(eventName, callBack))\n}\n","import {ReactElement} from 'react'\nimport {IStoreModel, IStoreResizableItemsModel} from '../@types'\nimport {findById} from './util'\nimport {ResizableModel} from '../models'\nimport {getStoreModel} from '../models/pane'\n\nexport const setStorage = (uniqueId : string, storageApi: any, resizable: ResizableModel) => {\n  const {panesList} = resizable\n\n  const objectToSave = {\n    panes: panesList.map(getStoreModel)\n  }\n\n  if (storageApi) { storageApi.setItem(uniqueId, JSON.stringify(objectToSave)) }\n}\n\nexport class ResizeStorage {\n  panesComponents: ReactElement[]\n  store: any = null\n  empty = false\n\n  constructor (uniqueId: string, storageApi: any, panesComponents: ReactElement[]) {\n    this.panesComponents = panesComponents\n    this.getStorage(uniqueId, storageApi)\n  }\n\n  // eslint-disable-next-line complexity\n  getStorage (uniqueId: string, storageApi: any): IStoreModel {\n    const {store} = this\n    if (store) {\n      return store\n    }\n\n    let value: any\n    if (storageApi) {\n      value = storageApi.getItem(uniqueId)\n      const parsedValue: IStoreModel = JSON.parse(value, function (key, value) {\n        if (key === 'defaultMaxSize') {\n          return Number(value)\n        }\n        return value\n      })\n\n      if (toString.call(parsedValue) === '[object Object]') {\n        const {panes} = parsedValue\n\n        if (panes) {\n          const allSameIds = panes.every((pane, i) => this.panesComponents[i]?.props.id === pane.id)\n\n          if (allSameIds && panes.length === this.panesComponents.length) {\n            this.store = parsedValue\n            return parsedValue\n          } else {\n            storageApi.removeItem(uniqueId)\n          }\n        } else {\n          storageApi.removeItem(uniqueId)\n        }\n      }\n    }\n    this.empty = true\n    this.store = {\n      panes: []\n    } as IStoreModel\n  }\n\n  // Removed from Call\n  getStoredPane (id: string): IStoreResizableItemsModel | null {\n    const {panes} = this.store\n    return findById(panes, id) ?? null\n  }\n}\n","import {IKeyToBoolMap} from '../@types'\nimport {CHANGE} from './constant'\nimport {ResizableModel, PaneModel} from '../models'\nimport {getSize, setPaneVisibility, setVisibilitySize, syncPaneToOldVisibilityModel} from '../models/pane'\nimport {\n  change1PixelToPanes,\n  getItemsSizeSum, getVisibleItems\n} from './panes'\nimport {getMaxContainerSizes} from './resizable-pane'\n\n// actionList it can be removed\nexport const updateSizeInRatio = (\n  allVisiblePanes: PaneModel[],\n  maxPaneSize: number,\n  actionVisibleList: PaneModel[]\n) => {\n  const currentPanesSize = getItemsSizeSum(allVisiblePanes)\n  const sizeChange = maxPaneSize - currentPanesSize\n\n  if (sizeChange === 0 || actionVisibleList.length === 0) {\n    return\n  }\n\n  const operation = sizeChange > 0 ? CHANGE.ADD : CHANGE.REMOVE\n\n  const sizeChangeAbsolute = Math.abs(sizeChange)\n\n  if (sizeChangeAbsolute <= actionVisibleList.length) {\n    change1PixelToPanes(actionVisibleList, sizeChangeAbsolute, operation)\n    return\n  }\n\n  const ratioSum = getItemsSizeSum(actionVisibleList)\n\n  const nextActionVisibleList: PaneModel[] = []\n  actionVisibleList.forEach((pane) => {\n    const size = getSize(pane)\n    const newSize = Math.round(sizeChangeAbsolute * (size / ratioSum))\n\n    const remainingSize = setVisibilitySize(pane, newSize, operation)\n    if (remainingSize) {\n      nextActionVisibleList.push(pane)\n    }\n  })\n\n  updateSizeInRatio(allVisiblePanes, maxPaneSize, nextActionVisibleList)\n}\n\nexport const setVisibilityFn = (resizable: ResizableModel, idMap: IKeyToBoolMap) => {\n  const {panesList, items} = resizable\n\n  let first = -1\n  for (let i = 0; i < items.length; i += 2) {\n    const item = items[i]\n    syncPaneToOldVisibilityModel(item)\n    const {id} = item\n    setPaneVisibility(item, idMap[id])\n\n    setPaneVisibility(items[i + 1], false)\n    if (item.visibility) {\n      if (first !== -1) {\n        setPaneVisibility(items[i - 1], true)\n      }\n      first = i\n    }\n  }\n\n  const visiblePanes = getVisibleItems(panesList)\n  const currentPanesSize = getItemsSizeSum(visiblePanes)\n\n  if (currentPanesSize === 0) {\n    visiblePanes.forEach((pane) => {\n      pane.size = 1\n    })\n  }\n\n  const {maxPaneSize} = getMaxContainerSizes(resizable)\n\n  updateSizeInRatio(visiblePanes, maxPaneSize, visiblePanes)\n}\n","import {ISetSizeBehaviour, IResizableItem} from '../@types'\nimport {\n  RATIO, BUTTOM_FIRST, TOP_FIRST,\n  CHANGE\n} from './constant'\nimport {ResizableModel} from '../models'\nimport {\n  changePaneSize, changePaneSizePlain, restoreLimits,\n  restorePaneBeforeSetSize,\n  storePaneForNewSetSizeKey, syncAxisSize\n} from '../models/pane'\nimport {\n  getVisibleItems, getItemsSizeSum\n} from './panes'\nimport {getChangeInViewSize} from './resizable-pane'\nimport {findIndex} from './util'\nimport {updateSizeInRatio} from './visibility-helper'\n\nexport const setSizeTopAndBottom = (\n  sizeChange: number,\n  behavior: ISetSizeBehaviour,\n  visibleItems: IResizableItem[],\n  requestIndexInVisibleItems: number\n) => {\n  let firstInningItems : IResizableItem[]\n  let secondInningItems: IResizableItem[]\n  const getActionOnItem = (operation: number) => (item: IResizableItem) => {\n    syncAxisSize(item)\n    restoreLimits(item)\n    sizeChange = changePaneSize(item, sizeChange, operation)\n  }\n\n  const changeSizeOfFirstAndSecondInningsItems = () => {\n    const orderList = [...firstInningItems, ...secondInningItems]\n    let action = CHANGE.REMOVE\n\n    if (sizeChange < 0) {\n      sizeChange = Math.abs(sizeChange)\n      action = CHANGE.ADD\n    }\n    orderList.forEach(getActionOnItem(action))\n  }\n\n  if (behavior === BUTTOM_FIRST) {\n    firstInningItems = visibleItems.slice(requestIndexInVisibleItems + 2)\n    secondInningItems = visibleItems.slice(0, requestIndexInVisibleItems - 1).reverse()\n    changeSizeOfFirstAndSecondInningsItems()\n  } else if (behavior === TOP_FIRST) {\n    firstInningItems = visibleItems.slice(0, requestIndexInVisibleItems - 1).reverse()\n    secondInningItems = visibleItems.slice(requestIndexInVisibleItems + 2)\n    changeSizeOfFirstAndSecondInningsItems()\n  }\n}\n\n// eslint-disable-next-line complexity\nexport const setSizeMethod = (\n  resizable: ResizableModel, id: string, newSize: number,\n  behavior: ISetSizeBehaviour = RATIO, isSecondAttemp = false) => {\n  const {panesList, items} = resizable\n\n  const visiblePanes = getVisibleItems(panesList)\n  const visibleItems = getVisibleItems(items)\n\n  const requestIndex = findIndex(visiblePanes, id)\n  if (requestIndex === -1 || newSize < 0) {\n    return\n  }\n\n  const currentSetSizeKey = `${id}-${behavior}`\n  if (resizable.setSizeKey === currentSetSizeKey) {\n    panesList.forEach(restorePaneBeforeSetSize)\n  } else {\n    panesList.forEach(storePaneForNewSetSizeKey)\n    resizable.setSizeKey = currentSetSizeKey\n  }\n\n  const initialSizeSum = getItemsSizeSum(visiblePanes)\n\n  const pane = visiblePanes[requestIndex]\n  restoreLimits(pane)\n  const preSize = pane.size\n\n  const acceptableNewSize = changePaneSizePlain(pane, newSize)\n  const sizeChange = acceptableNewSize - preSize\n\n  if (!sizeChange) {\n    return\n  }\n  const requestIndexInVisibleItems = findIndex(visibleItems, id)\n\n  if (behavior === RATIO) {\n    const remainingVisiblePanes = [...visiblePanes]\n    remainingVisiblePanes.splice(requestIndex, 1)\n\n    const newMaxPaneSizeAllowd = initialSizeSum - pane.size\n    updateSizeInRatio(remainingVisiblePanes, newMaxPaneSizeAllowd, remainingVisiblePanes)\n  }\n\n  setSizeTopAndBottom(sizeChange, behavior, visibleItems, requestIndexInVisibleItems)\n\n  if (!isSecondAttemp) {\n    const changeInView = getChangeInViewSize(resizable)\n    const allowedChange = acceptableNewSize + changeInView\n    setSizeMethod(resizable, id, allowedChange, behavior, true)\n  }\n}\n","function throttle(function_, wait) {\n\tif (typeof function_ !== 'function') {\n\t\tthrow new TypeError(`Expected the first argument to be a \\`function\\`, got \\`${typeof function_}\\`.`);\n\t}\n\n\t// TODO: Add `wait` validation too in the next major version.\n\n\tlet timeoutId;\n\tlet lastCallTime = 0;\n\n\treturn function throttled(...arguments_) { // eslint-disable-line func-names\n\t\tclearTimeout(timeoutId);\n\n\t\tconst now = Date.now();\n\t\tconst timeSinceLastCall = now - lastCallTime;\n\t\tconst delayForNextCall = wait - timeSinceLastCall;\n\n\t\tif (delayForNextCall <= 0) {\n\t\t\tlastCallTime = now;\n\t\t\tfunction_.apply(this, arguments_);\n\t\t} else {\n\t\t\ttimeoutId = setTimeout(() => {\n\t\t\t\tlastCallTime = Date.now();\n\t\t\t\tfunction_.apply(this, arguments_);\n\t\t\t}, delayForNextCall);\n\t\t}\n\t};\n}\n\nmodule.exports = throttle;\n","import {ResizableModel} from '../models'\nimport {getSize} from '../models/pane'\nimport {addDOMEvent, addDOMEventPassive, getResizableEvent, removeDOMEvent} from '../utils/dom'\nimport {getVisibleItems} from '../utils/panes'\n\nimport throttle from 'throttleit'\nimport {sortNumber} from '../utils/util'\nimport {EVENT_NAMES} from '../utils/constant'\n\nexport const attachDetectionCoordinate = (resizable: ResizableModel) => {\n  const {vertical, items, getContainerRect} = resizable\n\n  const {left, top} = getContainerRect()\n\n  let coordinatesSum = vertical ? left : top\n\n  const visibleItems = getVisibleItems(items)\n  const detectionCoordinate = []\n\n  for (let i = 0; i < visibleItems.length - 1; i += 2) {\n    const pane = visibleItems[i]\n    if (!pane.isHandle) {\n      const {defaultSize, id, detectionRadius} = visibleItems[i + 1]\n      const size = getSize(pane)\n      const resizerX1 = coordinatesSum + size - detectionRadius\n      const resizerX2 = coordinatesSum + size + defaultSize + detectionRadius\n      coordinatesSum += size + defaultSize\n      detectionCoordinate.push([resizerX1, resizerX2, id])\n    }\n  }\n\n  resizable.detectionDetails = detectionCoordinate\n}\n\nconst getMouseDownOnHandle = (\n  resizable: ResizableModel,\n  vertical: boolean,\n  registerResizeEvent: any) => (e: any) => {\n  const {detectionDetails} = resizable\n\n  const [cursorCoordinate] = getResizableEvent(e, vertical, {})\n\n  const resizerClickedCoordinateList = detectionDetails.map(([x1, x2]) => {\n    const coordinates = Math.abs(((x1 + x2) / 2) - cursorCoordinate)\n    return coordinates\n  })\n\n  const copyForSort = sortNumber(resizerClickedCoordinateList)\n\n  const closestCoordinate = copyForSort.pop()\n\n  const closestIndex = resizerClickedCoordinateList.indexOf(closestCoordinate)\n  const [x1, x2, handleId] = detectionDetails[closestIndex]\n  if (closestCoordinate <= ((x2 - x1) / 2)) {\n    resizable.previousTouchEvent = e\n    const resizableEvent = getResizableEvent(e, vertical, {})\n    resizable.onMouseDown(resizableEvent, handleId)\n    registerResizeEvent()\n  }\n}\n\nconst onContainerMouseMove = (\n  element: HTMLElement,\n  resizable: ResizableModel,\n  vertical: boolean,\n  cursorStyle: string) => (e: any) => {\n  const {detectionDetails} = resizable\n  const cursorCoordinate = vertical ? e.clientX : e.clientY\n  element.style.cursor = 'auto'\n  detectionDetails.forEach(([x1, x2]) => {\n    if (cursorCoordinate >= x1 && cursorCoordinate <= x2) {\n      element.style.cursor = cursorStyle\n    }\n  })\n}\n\nconst getResize = (resizable: ResizableModel, vertical: boolean) => (e: any) => {\n  const resizableEvent = getResizableEvent(e, vertical, resizable.previousTouchEvent)\n  resizable.onMoveResize(resizableEvent)\n}\n\nexport const getDetectionService = (resizable: ResizableModel) => {\n  const {vertical} = resizable\n  const cursorStyle = vertical ? 'col-resize' : 'row-resize'\n\n  const resize = getResize(resizable, vertical)\n\n  const registerResizeEvent = () => {\n    addDOMEvent(document, resize, EVENT_NAMES.mousemove)\n    addDOMEventPassive(document, resize, EVENT_NAMES.touchmove)\n  }\n\n  const clearResizeEvent = () => {\n    resizable.onMouseUp()\n    removeDOMEvent(document, resize, EVENT_NAMES.mousemove, EVENT_NAMES.touchmove)\n  }\n\n  const onMouseDownOnHandle = getMouseDownOnHandle(resizable, vertical, registerResizeEvent)\n\n  const startDetectionService = (containerNode: HTMLElement) => {\n    const onGlobalMouseMoveDebounce = throttle(\n      onContainerMouseMove(containerNode, resizable, vertical, cursorStyle), 100\n    )\n\n    // auto clear\n    addDOMEventPassive(containerNode, onGlobalMouseMoveDebounce, EVENT_NAMES.mousemove)\n    // auto clear\n    addDOMEventPassive(containerNode, onGlobalMouseMoveDebounce, EVENT_NAMES.touchmove)\n    // auto clear\n    addDOMEvent(containerNode, onMouseDownOnHandle, EVENT_NAMES.mousedown)\n    // auto clear\n    addDOMEventPassive(containerNode, onMouseDownOnHandle, EVENT_NAMES.touchstart)\n\n    addDOMEvent(document, clearResizeEvent, EVENT_NAMES.mouseup, EVENT_NAMES.touchend)\n  }\n\n  const clearDetectionService = () => {\n    removeDOMEvent(document, clearResizeEvent, EVENT_NAMES.mouseup, EVENT_NAMES.touchend)\n  }\n\n  return [startDetectionService, clearDetectionService]\n}\n","import {createMap, findById} from '../utils/util'\nimport {\n  DIRECTIONS,\n  DEFAULT_MAX_SIZE_KEY,\n  DEFAULT_MIN_SIZE_KEY,\n  RATIO,\n  SET_SIZE,\n  SIZE,\n  VISIBILITY\n} from '../utils/constant'\nimport {\n  createPaneModelListAndResizerModelList,\n  getPanesAndResizers,\n  restoreFn,\n  setUISizesFn,\n  syncAxisSizesFn,\n  updatSizeStateAllPanes,\n  setMaxLimits\n} from '../utils/panes'\nimport {\n  calculateAxes,\n  getHandleIndex,\n  movingLogic,\n  setCurrentMinMax,\n  toRatioModeAllPanes,\n  getChangeInViewSize,\n  getMaxContainerSizes,\n  clearflagsOnNewView\n} from '../utils/resizable-pane'\nimport {getDirection, getSizeStyle, toArray} from '../utils/dom'\nimport {ResizeStorage, setStorage} from '../utils/storage'\nimport {\n  IClearFlagsParam,\n  IKeyToBoolMap,\n  IResizableEvent,\n  IResizablePaneProviderProps,\n  ISetSizeBehaviour\n} from '../@types'\nimport {ResizableModel} from '../models'\nimport {setVisibilityFn} from '../utils/visibility-helper'\n\nimport {setSizeMethod} from '../utils/set-size-helper'\nimport {\n  getSize, registerResizableItem, setPaneOldVisibilityModel,\n  synSizeToMaxSize, synSizeToMinSize\n} from '../models/pane'\nimport {attachDetectionCoordinate} from '../services/detection-service'\n\nexport const getResizable = (\n  props: IResizablePaneProviderProps\n): ResizableModel => {\n  const {\n    vertical,\n    children,\n    unit,\n    uniqueId,\n    storageApi,\n    onResizeStop,\n    onChangeVisibility,\n    onResize\n  } = props\n\n  const myChildren = toArray(children)\n\n  // reference will never change for these items: storage,\n  // panesList, PaneModels, resizersList, ResizerModels\n  const storage = new ResizeStorage(uniqueId, storageApi, myChildren)\n  const items = createPaneModelListAndResizerModelList(\n    myChildren,\n    props,\n    storage\n  )\n  // const resizersList = createResizerModelList(myChildren, props, storage)\n  // reference will never change for these items: storage, panesList, resizersList\n\n  const [panesList, resizersList] = getPanesAndResizers(items)\n\n  const resizable = new ResizableModel()\n\n  resizable.register({\n    vertical,\n    items,\n    panesList,\n    resizersList\n  })\n\n  const syncAxisSizes = () => syncAxisSizesFn(items)\n\n  const emitResize = () => {\n    const resizeParams = getIdToSizeMap()\n    onResize(resizeParams)\n  }\n\n  const afterResizeStop = () => {\n    const resizeParams = getIdToSizeMap()\n    onResizeStop(resizeParams)\n    setStorage(uniqueId, storageApi, resizable)\n    attachDetectionCoordinate(resizable)\n  }\n\n  const emitChangeVisibility = () => {\n    const map = getVisibilityState()\n    onChangeVisibility(map)\n  }\n\n  const registerItem = (api: any, id: string) => {\n    registerResizableItem(findById(items, id), api)\n  }\n\n  const registerContainer = (node: HTMLElement) => {\n    resizable.getContainerRect = () => node.getBoundingClientRect()\n    let visibilityMap = props.visibility\n    if (storage.empty && unit === RATIO && !resizable.isSetRatioMode) {\n      toRatioModeAllPanes(resizable)\n      resizable.isSetRatioMode = true\n    } else {\n      const {panes} = storage.getStorage(uniqueId, storageApi)\n      visibilityMap = createMap(panes, VISIBILITY)\n    }\n    setVisibilities(visibilityMap)\n  }\n\n  const getIdToSizeMap = () => createMap(panesList, SIZE)\n  const getVisibilityState = () => createMap(panesList, VISIBILITY)\n\n  const setMouseDownFlag = (isMouseDown: boolean) => {\n    resizersList.forEach(({api}) => {\n      api.setMouseDownFlag(resizable.handleId, isMouseDown)\n    })\n  }\n\n  resizable.onMouseDown = ([mouseCoordinate]: IResizableEvent, handleId: string) => {\n    const index = getHandleIndex(items, handleId)\n    resizable.register({\n      index,\n      handleId,\n      direction: DIRECTIONS.NONE,\n      axisCoordinate: mouseCoordinate\n    })\n    setMouseDownFlag(true)\n    syncAxisSizes()\n  }\n\n  const onNewView = (except: IClearFlagsParam = '') => {\n    clearflagsOnNewView(resizable, except)\n    updatSizeStateAllPanes(panesList)\n  }\n\n  resizable.onMoveResize = ([mouseCoordinate, movement]: IResizableEvent) => {\n    if (resizable.isViewSizeChanged || !movement) {\n      return\n    }\n\n    setDirection(mouseCoordinate, movement)\n    const isAxisLimitReached = setAxisConfig(mouseCoordinate)\n\n    if (isAxisLimitReached) {\n      movingLogic(mouseCoordinate, resizable)\n    }\n    setUISizesFn(items)\n    onNewView()\n    emitResize()\n  }\n\n  const setDirection = (mouseCoordinate: number, movement: number) => {\n    const {direction} = resizable\n    const currentDirection = getDirection(movement)\n\n    if (currentDirection !== direction) {\n      resizable.direction = currentDirection\n      directionChangeActions(mouseCoordinate)\n    }\n  }\n\n  const directionChangeActions = (mouseCoordinate: number) => {\n    resizable.axisCoordinate = mouseCoordinate\n\n    syncAxisSizes()\n    setCurrentMinMax(resizable)\n    calculateAxes(resizable)\n  }\n\n  const setAxisConfig = (mouseCoordinate: number) => {\n    const {topAxis, bottomAxis} = resizable\n\n    if (mouseCoordinate <= topAxis) {\n      setMaxLimits(resizable, synSizeToMinSize, synSizeToMaxSize, DIRECTIONS.UP)\n      syncAxisSizes()\n      resizable.axisCoordinate = topAxis\n      return false\n    } else if (mouseCoordinate >= bottomAxis) {\n      setMaxLimits(resizable, synSizeToMaxSize, synSizeToMinSize, DIRECTIONS.DOWN)\n      syncAxisSizes()\n      resizable.axisCoordinate = bottomAxis\n      return false\n    }\n    return true\n  }\n\n  const getPaneSizeStyle = (id: string) => {\n    const size = getSize(findById(panesList, id))\n    return getSizeStyle(vertical, size)\n  }\n\n  const reflectVisibilityChange = () => {\n    setUISizesFn(items)\n    afterResizeStop()\n    emitChangeVisibility()\n    onNewView(VISIBILITY)\n  }\n\n  // It is getting default empty Object param\n  const setVisibilities = (param: IKeyToBoolMap) => {\n    const {newVisibilityModel} = resizable\n\n    const currentVisibilityMap = createMap(panesList, VISIBILITY)\n\n    const newMap = {\n      ...currentVisibilityMap,\n      ...param\n    }\n\n    if (!newVisibilityModel) {\n      resizable.newVisibilityModel = true\n      panesList.forEach(setPaneOldVisibilityModel)\n    }\n\n    setVisibilityFn(resizable, newMap)\n    const changeInViewSize = getChangeInViewSize(resizable)\n    resizable.isViewSizeChanged = !!changeInViewSize\n    reflectVisibilityChange()\n  }\n\n  resizable.onMouseUp = () => {\n    afterResizeStop()\n    setMouseDownFlag(false)\n  }\n\n  const restore = () => {\n    restoreFn(resizable.items)\n    onNewView()\n    afterResizeStop()\n    emitChangeVisibility()\n    resizable.isViewSizeChanged = false\n  }\n\n  const getState = () => createMap(panesList, SIZE, VISIBILITY, DEFAULT_MIN_SIZE_KEY, DEFAULT_MAX_SIZE_KEY)\n  const getVisibilities = () => getVisibilityState()\n\n  const postSetSize = () => {\n    setUISizesFn(items)\n    afterResizeStop()\n    onNewView(SET_SIZE)\n  }\n\n  const setSize = (\n    id: string,\n    newSize: number,\n    behavior?: ISetSizeBehaviour\n  ) => {\n    setSizeMethod(resizable, id, newSize, behavior)\n    postSetSize()\n  }\n\n  const setSizeRatio = (\n    id: string,\n    percent: number,\n    behavior?: ISetSizeBehaviour) => {\n    const {containerSize} = getMaxContainerSizes(resizable)\n    const newSize = containerSize * percent\n    setSizeMethod(resizable, id, newSize, behavior)\n    postSetSize()\n  }\n\n  const api = {\n    restore,\n    setVisibilities,\n    getSizes: getIdToSizeMap,\n    getVisibilities,\n    getState,\n    setSize,\n    setSizeRatio\n  }\n\n  resizable.register(\n    {\n      api,\n      registerItem,\n      registerContainer,\n      vertical,\n      props,\n      getPaneSizeStyle\n    }\n  )\n  return resizable\n}\n","import {RATIO, noop} from '../../../resizable-core'\nimport {IResizableOptions} from '../@types'\n\nexport const attachDefaultOptions = (\n  options: IResizableOptions\n) => {\n  const children = options.panes.map((pane) => {\n    return {\n      props: pane\n    }\n  })\n  return {\n    onResize: noop,\n    onResizeStop: noop,\n    onReady: noop,\n    onChangeVisibility: noop,\n\n    vertical: false,\n    unit: RATIO,\n    resizerSize: 2,\n    detectionRadius: 6,\n    visibility: {},\n    children,\n    ...options\n  }\n}\n\nexport const addClasses = (node: HTMLElement, classes: string) => {\n  const classList = classes.split(' ')\n  classList.forEach((paneClass) => paneClass && node.classList.add(paneClass))\n}\n\nexport const removeClasses = (node: HTMLElement, classes: string) => {\n  const classList = classes.split(' ')\n  classList.forEach((paneClass) => paneClass && node.classList.remove(paneClass))\n}\n\nexport const getMouseDownOnResizer = (\n  node: HTMLElement, nodeId: string,\n  activeClasses: string = '', normalClasses: string = '') =>\n  (id: string, isMouseDown: boolean) => {\n    if (id === nodeId) {\n      if (isMouseDown) {\n        addClasses(node, activeClasses)\n        removeClasses(node, normalClasses)\n      } else {\n        addClasses(node, normalClasses)\n        removeClasses(node, activeClasses)\n      }\n    }\n  }\n\nexport const getElementById = (id: string) => document.getElementById(id)\n\nexport const INITIAL_CONFIG:IResizableOptions = {\n  vertical: true,\n  uniqueId: 'container',\n  resizerSize: 2,\n  resizerClass: 'bg-slate-500',\n\n  panes: [\n    {\n      id: 'P0',\n      size: 100\n      // minSize: 30,\n      // maxSize: 150,\n      // detectionRadius: 20,\n      // onMaxSize: (id: string, size: number) => {\n      //   console.log('onMaxSize', id, size)\n      // },\n      // onMinSize: (id: string, size: number) => {\n      //   console.log('onMinSize', id, size)\n      // },\n      // onNormalSize: (id: string) => {\n      //   console.log('onNormalSize', id)\n      // }\n    },\n    {\n      id: 'P1',\n      size: 100\n    },\n    {\n      id: 'P2',\n      size: 100\n    }\n  ]\n}\n\nexport const CHILD_CONFIG:IResizableOptions = {\n  vertical: false,\n  uniqueId: 'uniqueId2',\n  resizerSize: 2,\n  resizerClass: 'bg-slate-500',\n  panes: [\n    {\n      id: 'P00',\n      size: 100\n    },\n    {\n      id: 'P01',\n      size: 100\n    }\n  ]\n}\n","import {getSetResizerSize, findIndex, getResizerId, ResizableModel} from '../../resizable-core'\nimport {getMouseDownOnResizer, getElementById, addClasses} from './utils'\n\nexport const initializeResizer = (paneId: string, registerItem: any, resizable: ResizableModel) => {\n  const {panesList, vertical} = resizable\n\n  const index = findIndex(panesList, paneId)\n\n  const {resizerClass, activeResizerClass} = panesList[index].props\n\n  const resizerId = getResizerId(paneId)\n  const node = getElementById(resizerId)\n  const setSize = getSetResizerSize(node, vertical)\n  addClasses(node, 'overflow-hidden')\n\n  const setMouseDownFlag = getMouseDownOnResizer(node, resizerId, activeResizerClass, resizerClass)\n  setMouseDownFlag(resizerId, false)\n  registerItem({\n    setSize,\n    setMouseDownFlag\n  }, resizerId)\n}\n","import {\n  IResizableApi,\n  RATIO,\n  RESIZE_HTML_EVENT,\n  addDOMEvent,\n  attachDetectionCoordinate,\n  clearflagsOnNewView,\n  getDetectionService, getResizable,\n  removeDOMEvent,\n  toRatioModeAllPanes\n} from '../../resizable-core'\nimport {IResizableOptions} from './@types'\nimport {initializPane} from './pane'\nimport {initializResizableContainer} from './resizable-container'\nimport {initializeResizer} from './resizer'\n\nimport {attachDefaultOptions} from './utils'\n\nexport type IGetResizablePanes = [resizableApi: IResizableApi, refreshResizable: () => void, clearResizable: () => void]\n\nexport const getResizablePanes = (options: IResizableOptions):IGetResizablePanes => {\n  const optionsWithDefaults = attachDefaultOptions(options) as any\n  const {panes, uniqueId, unit} = optionsWithDefaults\n\n  const resizable = getResizable(optionsWithDefaults)\n\n  const {registerItem, registerContainer, api} = resizable\n\n  panes.forEach(({id}, index: number) => {\n    initializPane(id, registerItem, optionsWithDefaults)\n    if (index !== panes.length - 1) {\n      initializeResizer(id, registerItem, resizable)\n    }\n  })\n\n  const onResize = () => {\n    if (unit === RATIO) {\n      toRatioModeAllPanes(resizable, true)\n      attachDetectionCoordinate(resizable)\n      clearflagsOnNewView(resizable)\n    }\n  }\n\n  addDOMEvent(window, onResize, RESIZE_HTML_EVENT)\n\n  const containerNode = initializResizableContainer(uniqueId, registerContainer, optionsWithDefaults)\n\n  const [startDetectionService, clearDetectionService] = getDetectionService(resizable)\n  const refreshResizable = () => {\n    clearDetectionService(containerNode)\n    startDetectionService(containerNode)\n  }\n  const clearResizable = () => {\n    clearDetectionService(containerNode)\n    removeDOMEvent(window, onResize, RESIZE_HTML_EVENT)\n  }\n\n  refreshResizable()\n\n  // api.setVisibilities(visibility)\n  console.log('Vimal')\n  setTimeout(() => api.setVisibilities({P1: true}), 2000)\n\n  return [api, refreshResizable, clearResizable]\n}\n","import {getElementById, addClasses} from './utils'\nimport {IResizableOptions} from './@types'\nimport {getSetSize} from '../../resizable-core'\n\nexport const initializPane = (paneId: string, registerItem: any, options: IResizableOptions) => {\n  const {vertical} = options\n\n  const node = getElementById(paneId)\n\n  addClasses(node, 'overflow-hidden flex-shrink-0')\n\n  registerItem({\n    setSize: getSetSize(node, vertical)\n  }, paneId)\n}\n","import {getElementById, addClasses} from './utils'\nimport {IResizableOptions} from './@types'\nimport {getContainerClass} from '../../resizable-core'\n\nexport const initializResizableContainer = (id: string, registerContainer: any, options: IResizableOptions) => {\n  const {vertical, unit} = options\n\n  const containerNode = getElementById(id)\n\n  const classname = getContainerClass(vertical, '', unit)\n\n  addClasses(containerNode, classname)\n  registerContainer(containerNode)\n\n  return containerNode\n}\n"],"names":["DIRECTIONS","CHANGE","RATIO","SET_SIZE","BUTTOM_FIRST","TOP_FIRST","VISIBILITY","SIZE","DEFAULT_MIN_SIZE_KEY","DEFAULT_MAX_SIZE_KEY","RESIZE_HTML_EVENT","NORMAL_SIZE_STATE","EVENT_NAMES","checkPaneModelErrors","size","minSize","maxSize","id","Error","concat","attachDefaultPaneProps","paneProps","resizableProps","propsWithNoUndefined","deleteUndefined","__assign","_a","onMinSize","noop","_b","onMaxSize","_c","onNormalSize","resizerClass","activeResizerClass","resizerSize","detectionRadius","Infinity","changePaneSizePlain","pane","newSize","acceptedSize","changePaneSize","sizeChange","operation","axisSize","Math","abs","setPaneVisibility","visibility","isPartiallyHidden","defaultMaxSize","defaultMinSize","isHandle","api","destroy","setPaneOldVisibilityModel","oldVisibleSize","oldVisibility","storePaneForNewSetSizeKey","initialSetSize","restorePaneBeforeSetSize","syncPaneRatioSizeToSize","sizeRatio","minSizeRatio","maxSizeRatio","restorePane","defaultSize","restoreLimits","defaultVisibility","resetMax","resetMin","synMaxToSize","synMinToSize","getMinDiff","getMaxDiff","synSizeToMinSize","synSizeToMaxSize","syncAxisSize","setUISize","setSize","getSize","updatSizeState","newSetSize","sizeState","props","getStoreModel","t","filterKeys","toString","getRatioSize","initializeSize","storedSize","initializeSizes","_","findById","list","_id","find","createMap","paneList","keys","_i","arguments","length","map","forEach","getValue","key","reduce","acc","findIndex","value","item","ratioAndRoundOff","totalSize","maxRatioValue","round","Number","toFixed","ratioToNumber","obj","retObj","isItUp","direction","getResizerId","paneId","anyObject","Object","reverse","__spreadArray","sortNumber","sort","a","b","PaneModel","store","this","vertical","minMaxUnit","unit","show","storedPane","getStoredPane","size_1","visibility_1","ResizableModel","isSetRatioMode","newVisibilityModel","isViewSizeChanged","prototype","register","subModel","assign","setUISizesFn","items","getVisibleItems","filter","getSum","getNumber","start","end","sum","i","synPanesMaxToSize","panesList","synPanesMinToSize","getItemsSizeSum","setMaxLimits","resizable","firstInningMethod","secondInningMethod","index","visibleItems","fixChangeCallBack","change","change1PixelToPanes","count","len","movingLogic","mouseCoordinate","decreasingItems","increasingItems","axisCoordinate","firstHalf","slice","secondHalf","reverseSizeChange","setCurrentMinMax","containerSize","getMaxContainerSizes","nextIdx","aMaxChangeUp","bMaxChangeUp","minMaxLogicUp","aMaxChangeDown","bMaxChangeDown","minMaxLogicDown","aIndex","bIndex","maxPaneSize","nextValue","lastIndex","nextAIndex","nextBIndex","paneA","paneB","toMinA","toMaxB","toMaxA","toMinB","getContainerRect","resizersList","top","height","left","width","maxTopAxis","toRatioModeAllPanes","isOnResize","minSizeCalculated","maxSizeCalculated","minSizeToUse","maxSizeToUse","storeSizeCalculated","sizeSum","leftOverTotalSize","changeOperation","getChangeInViewSize","clearflagsOnNewView","except","setSizeKey","toPx","getSizeKey","getContainerClass","className","param","join","joinClassName","flex","getResizableEvent","e","previousTouchEvent","event","type","startsWith","isTouchEvent","currentTouch","targetTouches","current","pageX","_d","pageY","clientX","clientY","getResizableEventFromTouch","movementX","movementY","getResizableEventFromMouse","getDirection","movement","getSetSize","node","style","addDOMEvent","callBack","eventNames","eventName","addEventListener","addDOMEventPassive","passive","removeDOMEvent","removeEventListener","setStorage","uniqueId","storageApi","objectToSave","panes","setItem","JSON","stringify","ResizeStorage","panesComponents","empty","getStorage","_this","getItem","parsedValue","parse","call","every","removeItem","updateSizeInRatio","allVisiblePanes","actionVisibleList","sizeChangeAbsolute","ratioSum","nextActionVisibleList","remainingSize","push","setSizeTopAndBottom","behavior","requestIndexInVisibleItems","firstInningItems","secondInningItems","changeSizeOfFirstAndSecondInningsItems","orderList","action","setSizeMethod","isSecondAttemp","visiblePanes","requestIndex","currentSetSizeKey","initialSizeSum","preSize","acceptableNewSize","remainingVisiblePanes","splice","newMaxPaneSizeAllowd","changeInView","$i","__esModule","hasOwnProperty","default","Bi","function_","wait","TypeError","timeoutId","lastCallTime","arguments_","clearTimeout","now","Date","delayForNextCall","apply","setTimeout","attachDetectionCoordinate","coordinatesSum","detectionCoordinate","resizerX1","resizerX2","detectionDetails","getResizable","children","onResizeStop","onChangeVisibility","onResize","myChildren","Array","isArray","toArray","storage","child","pop","syncAxisSizes","afterResizeStop","resizeParams","getIdToSizeMap","emitChangeVisibility","getVisibilityState","setMouseDownFlag","isMouseDown","handleId","onMouseDown","getHandleIndex","onNewView","onMoveResize","setDirection","setAxisConfig","currentDirection","directionChangeActions","visibleItemsList","bottomAxis","topAxis","calculateAxes","setVisibilities","currentVisibilityMap","newMap","idMap","first","changeInViewSize","onMouseUp","postSetSize","restore","getSizes","getVisibilities","getState","setSizeRatio","percent","registerItem","registerContainer","getBoundingClientRect","visibilityMap","getPaneSizeStyle","n","getSizeStyle","addClasses","classes","split","paneClass","classList","add","removeClasses","remove","getElementById","document","initializeResizer","resizerId","MIN_HEIGHT","getSetResizerSize","nodeId","activeClasses","normalClasses","getMouseDownOnResizer","getResizablePanes","options","optionsWithDefaults","onReady","attachDefaultOptions","initializPane","window","containerNode","classname","initializResizableContainer","cursorStyle","resize","resizableEvent","getResize","clearResizeEvent","onMouseDownOnHandle","registerResizeEvent","cursorCoordinate","resizerClickedCoordinateList","x1","x2","closestCoordinate","indexOf","s","getMouseDownOnHandle","onGlobalMouseMoveDebounce","throttle","element","cursor","getDetectionService","startDetectionService","clearDetectionService","refreshResizable","console","log","P1"],"mappings":"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","x_google_ignoreList":[12]}